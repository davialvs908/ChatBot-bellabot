def menu_bella_bot():
    """Menu principal da BellaBot com experi√™ncia de conversa melhorada e organiza√ß√£o clara"""
    # Inicializa o hist√≥rico com informa√ß√µes do sal√£o
    global historico_conversa
    
    contexto_salao = """
    O Espa√ßo Diva √© um sal√£o de beleza completo com servi√ßos de:
    - Cabelo: cortes, colora√ß√£o, tratamentos
    - Unhas: manicure, pedicure, alongamento
    - Est√©tica: maquiagem, design de sobrancelhas, massagens
    
    Temos tr√™s profissionais especializadas: Ana (cabelos), Beatriz (tratamentos) e Carla (unhas).
    Nossos hor√°rios dispon√≠veis s√£o: 10h, 11h, 14h e 16h.
    """
    
    # Reset do hist√≥rico para nova conversa
    historico_conversa = [
        {"role": "system", "parts": [{"text": f"Voc√™ √© Bella, uma assistente virtual amig√°vel do sal√£o Espa√ßo Diva. {contexto_salao}"}]}
    ]
    
    # Boas-vindas personalizada
    boas_vindas = perguntar_gemini("D√™ boas-vindas a um cliente novo do sal√£o, apresente-se como assistente virtual Bella e mostre o menu de op√ß√µes dispon√≠veis de forma amig√°vel.")
    print(f"\n{boas_vindas}")
    
    # Exibe menu de op√ß√µes estruturado
    exibir_menu()
    
    # Loop principal de conversa
    while True:
        # Captura entrada do usu√°rio
        entrada_usuario = input("\nVoc√™: ").strip()
        
        # Processamento das op√ß√µes do menu
        if entrada_usuario.lower() in ['1', 'agendar', 'marcar', 'agendar hor√°rio', 'marcar hor√°rio']:
            print("\n‚ú® Iniciando processo de agendamento ‚ú®")
            resposta = perguntar_gemini("O cliente escolheu agendar um hor√°rio. Confirme que vai iniciar o processo de agendamento e pe√ßa o nome completo.")
            print(resposta)
            conversa_agendamento()
            exibir_menu()
            continue
            
        elif entrada_usuario.lower() in ['2', 'd√∫vidas', 'duvidas', 'sugestoes', 'sugest√µes', 'informa√ß√µes', 'informacoes']:
            print("\nüìã Informa√ß√µes e Sugest√µes üìã")
            resposta = perguntar_gemini("O cliente deseja informa√ß√µes sobre servi√ßos ou sugest√µes. Pergunte qual servi√ßo espec√≠fico gostaria de saber mais detalhes.")
            print(resposta)
            pergunta = input("Voc√™: ").strip()
            prompt = f"O cliente est√° pedindo informa√ß√µes com a mensagem: '{pergunta}'. Forne√ßa detalhes relevantes sobre os servi√ßos e pre√ßos do sal√£o de forma √∫til."
            resposta = perguntar_gemini(prompt, temperatura=0.6)
            print(resposta)
            exibir_menu()
            continue
            
        elif entrada_usuario.lower() in ['3', 'atendente', 'humano', 'pessoa', 'falar com atendente']:
            print("\nüë© Transferindo para Atendente Humana üë©")
            resposta = perguntar_gemini("O cliente deseja falar com uma atendente humana. Informe que vai transferir e pe√ßa um telefone para contato.")
            print(resposta)
            telefone = input("Voc√™: ")
            resposta = perguntar_gemini(f"O cliente forneceu o contato: '{telefone}'. Confirme que uma atendente entrar√° em contato em breve e agrade√ßa pela prefer√™ncia.")
            print(resposta)
            exibir_menu()
            continue
            
        elif entrada_usuario.lower() in ['4', 'sair', 'exit', 'tchau', 'adeus', 'finalizar']:
            despedida = perguntar_gemini("O cliente deseja encerrar o atendimento. Responda com uma mensagem de despedida calorosa e convide para retornar.")
            print(despedida)
            print("\n‚ú® Atendimento finalizado. Obrigada por utilizar a BellaBot! ‚ú®")
            break
            
        elif entrada_usuario.lower() == 'menu':
            exibir_menu()
            continue
            
        else:
            # Analisa a entrada para determinar inten√ß√£o quando n√£o √© comando direto do menu
            intencao = entender_intencao(entrada_usuario)
            
            if intencao == "agendar":
                print("\n‚ú® Iniciando processo de agendamento ‚ú®")
                resposta = perguntar_gemini(f"O cliente disse: '{entrada_usuario}' e quer fazer um agendamento. Confirme que vai iniciar o processo de agendamento e pe√ßa o nome completo.")
                print(resposta)
                conversa_agendamento()
            elif intencao == "informacao":
                prompt = f"O cliente est√° pedindo informa√ß√µes com a mensagem: '{entrada_usuario}'. Forne√ßa detalhes relevantes sobre os servi√ßos e pre√ßos do sal√£o, de forma personalizada e √∫til."
                resposta = perguntar_gemini(prompt, temperatura=0.6)
                print(resposta)
            elif intencao == "atendente":
                resposta = perguntar_gemini(f"O cliente disse: '{entrada_usuario}' e parece querer falar com uma atendente humana. Informe que vai transferir para uma atendente e pe√ßa um telefone para contato.")
                print(resposta)
                telefone = input("Voc√™: ")
                resposta = perguntar_gemini(f"O cliente forneceu o contato: '{telefone}'. Confirme que uma atendente entrar√° em contato em breve e agrade√ßa pela prefer√™ncia.")
                print(resposta)
            elif intencao == "sair":
                despedida = perguntar_gemini(f"O cliente disse: '{entrada_usuario}' e parece estar se despedindo. Responda com uma mensagem de despedida calorosa e convide para retornar.")
                print(despedida)
                print("\n‚ú® Atendimento finalizado. Obrigada por utilizar a BellaBot! ‚ú®")
                break
            else:
                resposta = perguntar_gemini(f"O cliente disse: '{entrada_usuario}'. Responda de forma conversacional, amig√°vel e √∫til. Ao final, lembre que pode digitar 'menu' para ver as op√ß√µes.")
                print(resposta)
            
            # Exibe menu ap√≥s qualquer intera√ß√£o n√£o expl√≠cita do menu
            if intencao != "sair":
                print("\nDigite 'menu' para ver as op√ß√µes dispon√≠veis.")

def exibir_menu():
    """Exibe menu de op√ß√µes formatado e organizado"""
    print("\n" + "="*50)
    print("üåü  MENU ESPA√áO DIVA - Como posso ajudar?  üåü")
    print("="*50)
    print("1Ô∏è‚É£  Agendar Hor√°rio")
    print("2Ô∏è‚É£  D√∫vidas e Sugest√µes")
    print("3Ô∏è‚É£  Falar com Atendente")
    print("4Ô∏è‚É£  Sair")
    print("="*50)

# Fun√ß√£o principal
if __name__ == "__main__":
    try:
        print("\n‚ú® Iniciando BellaBot - Assistente Virtual do Espa√ßo Diva ‚ú®")
        menu_bella_bot()
    except KeyboardInterrupt:
        print("\n\nAtendimento finalizado. Obrigada por utilizar a BellaBot!")
    except Exception as e:
        print(f"\nOcorreu um erro inesperado: {e}")
        print("Por favor, reinicie o sistema.")