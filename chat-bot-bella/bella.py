import requests
from datetime import datetime
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")
URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={API_KEY}"

# Constantes
COLABORADORAS = ["Ana", "Beatriz", "Carla"]
HORARIOS_DISPONIVEIS = ["10:00", "11:00", "14:00", "15:00", "16:00"]
ARQUIVO_AGENDAMENTOS = "agendamentos.txt"
NOME_SALAO = "Bella Beauty Salon"

# Personalidade do Bot
INSTRUCOES_PERSONALIDADE = """
Voc√™ √© a Bella, a assistente virtual do Bella Beauty Salon, um sal√£o de beleza especializado em cabelos e unhas.
Seu tom deve ser sempre:
- Acolhedor e caloroso, como uma recepcionista experiente de sal√£o
- Profissional mas amig√°vel
- Conhecedor sobre servi√ßos de beleza, cuidados com cabelo e unhas
- Emp√°tico com as necessidades das clientes

Ao sugerir servi√ßos ou responder d√∫vidas:
- Mencione os benef√≠cios dos tratamentos
- Use linguagem que demonstre conhecimento t√©cnico sobre beleza e est√©tica
- Personalize as sugest√µes conforme as necessidades espec√≠ficas da cliente
- Sempre que poss√≠vel, mencione os servi√ßos que o Bella Beauty Salon oferece

Servi√ßos do sal√£o incluem:
- Cortes (modernos, cl√°ssicos, repicados)
- Colora√ß√£o (tintura, mechas, ombr√© hair, balayage)
- Tratamentos capilares (hidrata√ß√£o, reconstru√ß√£o, queratiniza√ß√£o)
- Penteados (para festas e eventos)
- Manicure e pedicure (simples, decoradas, em gel)
- Tratamentos para unhas (fortalecimento, alongamento)

Voc√™ tamb√©m possui conhecimento especializado em:
- Cuidados di√°rios com diferentes tipos de cabelo
- Tratamentos caseiros para cabelos e unhas
- Identifica√ß√£o de problemas comuns em cabelos e unhas
- Dicas de manuten√ß√£o entre visitas ao sal√£o
- Produtos recomendados para diferentes necessidades

O sal√£o valoriza atendimento personalizado e resultados que real√ßam a beleza natural de cada cliente.
Seja sempre prestativa e detalhada ao responder d√∫vidas sobre cuidados com cabelo e unhas.
"""


def esta_em_horario_comercial():
    """Verifica se o hor√°rio atual est√° dentro do hor√°rio comercial (8h-17h)"""
    hora_atual = datetime.now().hour
    return 8 <= hora_atual <= 24


def consultar_gemini(prompt, contexto_conversacional=None):
    """Envia uma consulta para a API do Gemini e retorna a resposta com personalidade"""
    try:
        # Combina a personalidade com o prompt espec√≠fico
        prompt_completo = f"{INSTRUCOES_PERSONALIDADE}\n\nSolicita√ß√£o da cliente: {prompt}"
        
        # Adiciona contexto da conversa se fornecido
        if contexto_conversacional:
            prompt_completo += f"\n\nContexto da conversa: {contexto_conversacional}"
        
        headers = {"Content-Type": "application/json"}
        data = {
            "contents": [
                {
                    "parts": [{"text": prompt_completo}]
                }
            ]
        }
        
        response = requests.post(URL, headers=headers, json=data, timeout=60)
        
        if response.status_code == 200:
            resposta_json = response.json()
            return resposta_json['candidates'][0]['content']['parts'][0]['text']
        else:
            return f"‚ö†Ô∏è Erro na API (c√≥digo {response.status_code})"
            
    except requests.exceptions.Timeout:
        return "‚ö†Ô∏è A conex√£o demorou demais. Tente novamente mais tarde."
    except Exception as e:
        return f"‚ö†Ô∏è Ocorreu um erro: {str(e)}"


def registrar_agendamento(nome, telefone, colaboradora, servico, horario):
    """Salva um novo agendamento no arquivo"""
    with open(ARQUIVO_AGENDAMENTOS, "a", encoding="utf-8") as arquivo:
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
        arquivo.write(f"{timestamp} - Cliente: {nome} - N√∫mero: {telefone} - {colaboradora} - {servico} √†s {horario}\n")


def obter_horarios_ocupados():
    """Carrega os hor√°rios j√° agendados do arquivo"""
    horarios_ocupados = []
    
    if os.path.exists(ARQUIVO_AGENDAMENTOS):
        with open(ARQUIVO_AGENDAMENTOS, "r", encoding="utf-8") as arquivo:
            for linha in arquivo:
                partes = linha.strip().split(" √†s ")
                if len(partes) > 1:
                    horario = partes[1].strip()
                    horarios_ocupados.append(horario)
                    
    return horarios_ocupados


def exibir_menu():
    """Exibe o menu principal do bot"""
    print(f"\nüí¨ Ol√°, eu sou a Bella! ‚ú® Seja bem-vinda ao {NOME_SALAO}!")
    print("Como posso ajudar voc√™ hoje?")
    print("1Ô∏è‚É£ Agendar hor√°rio")
    print("2Ô∏è‚É£ Sugest√µes e d√∫vidas sobre servi√ßos")
    print("3Ô∏è‚É£ Falar com uma atendente")
    print("0Ô∏è‚É£ Sair")


def exibir_horarios_disponiveis(horarios_livres):
    """Exibe os hor√°rios dispon√≠veis numerados para sele√ß√£o"""
    print("\nüïí Hor√°rios dispon√≠veis:")
    for i, horario in enumerate(horarios_livres, 1):
        print(f"{i}. {horario}")


def selecionar_horario(horarios_livres):
    """Permite ao usu√°rio selecionar um hor√°rio da lista numerada"""
    exibir_horarios_disponiveis(horarios_livres)
    
    while True:
        try:
            escolha = input("\nDigite o n√∫mero do hor√°rio desejado: ").strip()
            indice = int(escolha) - 1
            
            if 0 <= indice < len(horarios_livres):
                return horarios_livres[indice]
            else:
                print(f"‚ö†Ô∏è Por favor, digite um n√∫mero entre 1 e {len(horarios_livres)}.")
        except ValueError:
            print("‚ö†Ô∏è Por favor, digite apenas o n√∫mero correspondente ao hor√°rio.")


def processar_agendamento():
    """Processa o fluxo de agendamento"""
    if not esta_em_horario_comercial():
        print("‚è∞ Nosso atendimento √© das 8h √†s 17h. Por favor, envie mensagem nesse hor√°rio.")
        return
        
    resposta = input("Gostaria de agendar um hor√°rio? (Sim/N√£o): ").strip().lower()
    if resposta != "sim":
        print("üòä Tudo bem! Quando quiser agendar, estou aqui para ajudar!")
        return
        
    # Coleta informa√ß√µes do cliente
    nome_cliente = input("Qual √© o seu nome? ").strip()
    numero_cliente = input("Qual √© o seu n√∫mero de telefone? ").strip()
    
    # Seleciona colaboradora
    colaboradora = input(f"Com qual profissional deseja agendar? Temos: {', '.join(COLABORADORAS)}: ").strip().title()
    if colaboradora not in COLABORADORAS:
        print("‚ö†Ô∏è N√£o encontramos essa profissional em nossa equipe.")
        return
        
    # Seleciona servi√ßo
    servico = input("Qual servi√ßo voc√™ deseja? (ex: corte, colora√ß√£o, manicure): ").strip()
    if "n√£o sei" in servico.lower() or "indecisa" in servico.lower():
        dica = consultar_gemini(
            "Uma cliente est√° indecisa sobre qual servi√ßo escolher. Sugira 3 op√ß√µes populares de servi√ßos, explicando brevemente os benef√≠cios de cada um.",
            f"Cliente: {nome_cliente}"
        )
        print("\nüí° Sugest√µes para voc√™:\n", dica)
        servico = input("\nQual servi√ßo voc√™ gostaria de agendar? ").strip()
    
    # Verifica hor√°rios dispon√≠veis
    horarios_ocupados = obter_horarios_ocupados()
    horarios_livres = [h for h in HORARIOS_DISPONIVEIS if h not in horarios_ocupados]
    
    if not horarios_livres:
        print("‚ö†Ô∏è Todos os hor√°rios de hoje est√£o ocupados. Podemos verificar disponibilidade para amanh√£!")
        return
    
    # Seleciona hor√°rio usando a nova interface numerada
    horario = selecionar_horario(horarios_livres)
        
    # Confirma agendamento
    registrar_agendamento(nome_cliente, numero_cliente, colaboradora, servico, horario)
    
    # Mensagem personalizada de confirma√ß√£o via Gemini
    confirmacao = consultar_gemini(
        f"Crie uma mensagem de confirma√ß√£o de agendamento entusiasmada e personalizada para uma cliente chamada {nome_cliente} que agendou {servico} com {colaboradora} √†s {horario}. Mantenha a mensagem curta e amig√°vel.",
        f"Cliente: {nome_cliente}, Servi√ßo: {servico}"
    )
    
    print(f"\n‚úÖ {confirmacao}")


def sugestoes_e_duvidas():
    """Fun√ß√£o unificada para lidar com sugest√µes e d√∫vidas"""
    print("\nüåü Como posso ajudar voc√™ hoje?")
    print("1. Sugest√µes de servi√ßos para voc√™")
    print("2. Tirar d√∫vidas sobre servi√ßos e cuidados")
    print("0. Voltar ao menu principal")
    
    escolha = input("\nDigite o n√∫mero da op√ß√£o desejada: ").strip()
    
    if escolha == "1":
        obter_sugestoes()
    elif escolha == "2":
        responder_duvidas()
    elif escolha == "0":
        return
    else:
        print("‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes dispon√≠veis.")


def obter_sugestoes():
    """Solicita sugest√µes de servi√ßos com base nas prefer√™ncias do cliente"""
    print("üîé Vamos encontrar o servi√ßo perfeito para voc√™...")
    
    gosto = input("Por favor, conte-me um pouco sobre o que voc√™ est√° procurando ou sua situa√ß√£o atual "
                 "(ex: 'meu cabelo est√° danificado', 'quero algo para uma festa', 'minhas unhas quebram facilmente'): ").strip()
    
    if not gosto:
        print("‚ö†Ô∏è Para que eu possa sugerir o melhor servi√ßo, preciso saber um pouco mais sobre o que voc√™ procura.")
        return
        
    prompt = f"Uma cliente do sal√£o de beleza compartilhou a seguinte necessidade/situa√ß√£o: '{gosto}'. " \
             f"Sugira 2-3 servi√ßos espec√≠ficos do nosso sal√£o que seriam ideais para ela, explicando brevemente por que cada um " \
             f"seria ben√©fico no caso dela. Seja espec√≠fica, acolhedora e demonstre conhecimento t√©cnico de beleza."
    
    sugestao = consultar_gemini(prompt)
    print("\n‚ú® Recomenda√ß√µes personalizadas para voc√™:\n", sugestao)


def responder_duvidas():
    """Responde √†s d√∫vidas da cliente sobre os servi√ßos e cuidados com cabelo/unhas"""
    print("‚ùì Em que posso ajudar? Sou especialista em cuidados com cabelo e unhas!")
    
    duvida = input("Qual √© a sua d√∫vida? Pode perguntar sobre nossos servi√ßos, cuidados com cabelo, cuidados com unhas, ou qualquer outra quest√£o relacionada √† beleza: ").strip()
    
    if not duvida:
        print("‚ö†Ô∏è Por favor, fa√ßa sua pergunta para que eu possa ajudar.")
        return
    
    prompt = f"Uma cliente do sal√£o de beleza tem a seguinte d√∫vida: '{duvida}'. " \
             f"Responda de forma completa, educada e informativa, demonstrando conhecimento t√©cnico sobre tratamentos " \
             f"de beleza e cuidados com cabelo e unhas. Use linguagem acess√≠vel, mas t√©cnica quando necess√°rio. " \
             f"Forne√ßa informa√ß√µes pr√°ticas e √∫teis. Se apropriado, sugira servi√ßos do nosso sal√£o que possam " \
             f"ajudar com a quest√£o dela ou produtos para uso em casa."
    
    resposta = consultar_gemini(prompt)
    print("\nüìù Resposta:", resposta)
    
    # Pergunta se a resposta foi √∫til
    util = input("\nEssa resposta foi √∫til para voc√™? (Sim/N√£o): ").strip().lower()
    if util != "sim":
        mais_info = input("Por favor, me conte mais detalhes para que eu possa ajudar melhor: ").strip()
        if mais_info:
            contexto = f"A cliente n√£o ficou satisfeita com a resposta anterior sobre: '{duvida}'. " \
                      f"Ela adicionou as seguintes informa√ß√µes: '{mais_info}'. " \
                      f"Por favor, forne√ßa uma resposta mais direcionada e espec√≠fica, usando seu conhecimento especializado em cuidados com cabelo e unhas."
            
            nova_resposta = consultar_gemini(contexto)
            print("\nüìù Resposta atualizada:", nova_resposta)


def main():
    """Fun√ß√£o principal do programa"""
    while True:
        exibir_menu()
        escolha = input("\nDigite o n√∫mero da op√ß√£o desejada: ").strip()
        
        if escolha == "1":
            processar_agendamento()
        elif escolha == "2":
            sugestoes_e_duvidas()
        elif escolha == "3":
            print("üìû Voc√™ ser√° redirecionada para uma atendente humana. Por favor, aguarde um momento...")
        elif escolha == "0":
            mensagem_despedida = consultar_gemini("Crie uma mensagem de despedida calorosa e breve para uma cliente do sal√£o de beleza que est√° encerrando a conversa.")
            print(f"\nüëã {mensagem_despedida}")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes dispon√≠veis.")


if __name__ == "__main__":
    main()